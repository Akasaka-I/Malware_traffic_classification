from PIL import Image
from pcap_processing import extract_flows, process_flows
import numpy as np
import os
from tqdm import tqdm

def image_generation(processed_flows):
    images = []
    for flow_tuple, packets in processed_flows.items():
        # Combine all packet payloads in this flow into one byte sequence
        combined_payload = b''.join(bytes(packet) for packet in packets)

        # Trim or pad the data to 784 bytes
        if len(combined_payload) > 784:
            combined_payload = combined_payload[:784]
        elif len(combined_payload) < 784:
            combined_payload += b'\x00' * (784 - len(combined_payload))

        # Convert to a numpy array and reshape to 28x28
        image_array = np.frombuffer(combined_payload, dtype=np.uint8).reshape(28, 28)
        image = Image.fromarray(image_array, mode='L')
        images.append(image)

    return images

def main():
    base_folder = './virusPcap'
    output_folder = './virusPcapImage'


    folder_list = os.listdir(base_folder)

    # Ensure the base output directory exists
    if not os.path.exists(output_folder):
        os.makedirs(output_folder)

    for subdirectory in tqdm(folder_list):
        folder_path = os.path.join(base_folder,subdirectory)
        if not os.path.exists(os.path.join(output_folder, subdirectory)):
            os.makedirs(os.path.join(output_folder, subdirectory))

        for filename in tqdm(os.listdir(folder_path),leave=False):
            # Usage
            pcap_file = os.path.join(folder_path,filename)
            if pcap_file.endswith(".pcap"):
                flows = extract_flows(pcap_file)
                processed_flows = process_flows(flows)
                images = image_generation(processed_flows)

                # Optionally, save images to files or display them
                for idx, img in enumerate(images):
                    image_filename = output_folder + '/' + subdirectory + '/' + filename.split('.')[0] + '_' + str(idx) + '.png'
                    #print(image_filename)
                    img.save(image_filename)

if __name__ == "__main__":
    main()